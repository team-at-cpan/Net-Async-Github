package Net::Async::Github::PullRequest;

use strict;
use warnings;

our $VERSION = '0.012'; # VERSION

use parent qw(Net::Async::Github::Common);

=head1 NAME

Net::Async::Github::PullRequest

=head1 DESCRIPTION

Autogenerated module.

=cut

use Net::Async::Github::User ();

=head1 METHODS

=cut

=head2 url

Provides an accessor for C<url>.

=cut

sub url {
    shift->{url}
}

=head2 id

Provides an accessor for C<id>.

=cut

sub id {
    shift->{id}
}

=head2 node_id

Provides an accessor for C<node_id>.

=cut

sub node_id {
    shift->{node_id}
}

=head2 number

Provides an accessor for C<number>.

=cut

sub number {
    shift->{number}
}

=head2 state

Provides an accessor for C<state>.

=cut

sub state {
    shift->{state}
}

=head2 locked

Provides an accessor for C<locked>.

=cut

sub locked {
    shift->{locked}
}

=head2 title

Provides an accessor for C<title>.

=cut

sub title {
    shift->{title}
}

=head2 user

Provides an accessor for C<user>.

=cut

sub user {
    $_[0]->{user} =
     Net::Async::Github::User->new($_[0]->{user})
        unless ref $_[0]->{user};
    shift->{user}
}

=head2 body

Provides an accessor for C<body>.

=cut

sub body {
    shift->{body}
}

=head2 labels

Provides an accessor for C<labels>.

=cut

sub labels {
    shift->{labels}
}

=head2 milestone

Provides an accessor for C<milestone>.

=cut

sub milestone {
    shift->{milestone}
}

=head2 created_at

Provides an accessor for C<created_at>.

=cut

sub created_at {
    shift->{created_at}
}

=head2 updated_at

Provides an accessor for C<updated_at>.

=cut

sub updated_at {
    shift->{updated_at}
}

=head2 closed_at

Provides an accessor for C<closed_at>.

=cut

sub closed_at {
    shift->{closed_at}
}

=head2 merged_at

Provides an accessor for C<merged_at>.

=cut

sub merged_at {
    shift->{merged_at}
}

=head2 merge_commit_sha

Provides an accessor for C<merge_commit_sha>.

=cut

sub merge_commit_sha {
    shift->{merge_commit_sha}
}

=head2 mergeable

Provides an accessor for C<mergeable>.

=cut

sub mergeable {
    shift->{mergeable}
}

=head2 merged

Provides an accessor for C<merged>.

=cut

sub merged {
    shift->{merged}
}

=head2 assignee

Provides an accessor for C<assignee>.

=cut

sub assignee {
    $_[0]->{assignee} =
     Net::Async::Github::User->new($_[0]->{assignee})
        unless ref $_[0]->{assignee};
    shift->{assignee}
}

=head2 head

Provides an accessor for C<head>.

=cut

sub head {
    shift->{head}
}

=head2 base

Provides an accessor for C<base>.

=cut

sub base {
    shift->{base}
}

=head2 author_association

Provides an accessor for C<author_association>.

=cut

sub author_association {
    shift->{author_association}
}

1;

